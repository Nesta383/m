
import re
import base64
import sys
from pathlib import Path

SUSPICIOUS_KEYWORDS = [
    r'Invoke-Expression', r'Invoke-WebRequest', r'Start-Process',
    r'RunAs', r'Schtasks', r'Create', r'Add-Type', r'Get-Credential',
    r'Export-Csv', r'Out-File', r'New-Item', r'Net\.WebClient', r'Invoke-RestMethod'
]

# regex patterns
BASE64_RE = re.compile(rb'(?<![A-Za-z0-9+/=])([A-Za-z0-9+/]{20,}={0,2})(?![A-Za-z0-9+/=])')
CHARCODE_ARRAY_RE = re.compile(r'\[\s*(?:\d{1,3}\s*,\s*)+\d{1,3}\s*\]')
STRING_LIST_RE = re.compile(r'\[\s*(?:(?:\'[^\']*\'|\"[^\"]*\")\s*,\s*)*(?:\'[^\']*\'|\"[^\"]*\")\s*\]')
JOIN_CALL_RE = re.compile(r"(?P<prefix>\.join\(|Join\(|Join-String)")

def try_base64_decode(b):
    try:
        dec = base64.b64decode(b, validate=True)
        # ensure it's printable-ish utf-8
        try:
            txt = dec.decode('utf-8')
            # simple heuristic: printable fraction
            printable = sum(1 for ch in txt if 32 <= ord(ch) <= 126)
            if printable / max(1, len(txt)) > 0.6:
                return txt
        except UnicodeDecodeError:
            return None
    except Exception:
        return None
    return None

def decode_charcode_array(text):
    # find arrays like [112,114,105,...]
    results = []
    for m in re.finditer(CHARCODE_ARRAY_RE, text):
        arr_text = m.group(0)
        nums = re.findall(r'\d{1,3}', arr_text)
        try:
            chars = ''.join(chr(int(n)) for n in nums)
            results.append((m.start(), arr_text, chars))
        except Exception:
            continue
    return results

def extract_string_lists(text):
    results = []
    for m in re.finditer(STRING_LIST_RE, text):
        list_text = m.group(0)
        # extract items
        items = re.findall(r'\'([^\']*)\'|"([^"]*)"', list_text)
        # items is list of tuples because one of the groups will be filled
        flat = [a if a else b for a,b in items]
        results.append((m.start(), list_text, flat))
    return results

def scan_file(path: Path):
    data = path.read_bytes()
    text = None
    try:
        text = data.decode('utf-8', errors='ignore')
    except Exception:
        text = data.decode('latin-1', errors='ignore')

    print(f'File: {path}\n---')

    # suspicious keywords
    found_suspicious = []
    for kw in SUSPICIOUS_KEYWORDS:
        if re.search(kw, text, flags=re.IGNORECASE):
            found_suspicious.append(kw)
    if found_suspicious:
        print('== Suspicious keywords found ==')
        for kw in found_suspicious:
            print('  ', kw)
        print('---')

    # base64 candidates (binary scan)
    print('== Base64-like candidates (decoded if plausible) ==')
    for m in BASE64_RE.finditer(data):
        b64 = m.group(1)
        decoded = try_base64_decode(b64)
        snippet = b64[:60] + (b'...' if len(b64)>60 else b'')
        print(f'Candidate (len={len(b64)}): {snippet.decode("ascii",errors="ignore")}')
        if decoded:
            print('  -> decoded (utf-8):')
            print('     ', decoded.replace('\n','\\n')[:400])
        else:
            print('  -> not valid/printable base64 or not utf-8 text')
    print('---')

    # charcode arrays
    print('== Char-code arrays like [112,114,...] ==')
    for pos, arr, decoded in decode_charcode_array(text):
        print(f'At {pos}: {arr[:80]}')
        print(f'  -> {decoded[:200]}')
    print('---')

    # string lists and possible joins
    print('== String-list literals (candidates for join) ==')
    for pos, list_text, items in extract_string_lists(text):
        if len(items) >= 2:
            preview = ','.join(item for item in items[:8])
            print(f'At {pos}: {list_text[:80]}')
            print(f'  -> items (first 8): {preview}')
    print('---')

    # simple heuristic: show lines containing Invoke-Expression / eval-like usage but do not execute
    print('== Lines with eval-like patterns (no execution) ==')
    for i, line in enumerate(text.splitlines(), start=1):
        if re.search(r'Invoke-Expression|iex\b|Invoke-Item|[Ee]xec\(|\.Invoke\(|Start-Process', line):
            print(f'{i:4d}: {line.strip()}')
    print('---')

    print('Note: This tool DOES NOT execute any code. Use it in a sandbox/VM for safety.\n')

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print('Usage: python safe_deobfuscator.py suspicious_script.ps1')
        sys.exit(1)
    p = Path(sys.argv[1])
    if not p.exists():
        print('File not found:', p)
        sys.exit(1)
    scan_file(p)
